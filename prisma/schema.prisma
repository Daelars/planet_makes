generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @default(USER)
  cart      Cart?
  orders    Order[]
}

model Product {
  id             String         @id @default(cuid())
  name           String
  description    String
  price          Float
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  collection     String
  colours        String[]
  imageUrl       String
  inStock        Boolean        @default(true)
  isOnSale       Boolean        @default(false)
  originalPrice  Float?
  productDetails String
  shippingPrice  Float
  showReviews    Boolean        @default(true)
  CartItem       CartItem[]
  OrderItem      OrderItem[]
  ProductImage   ProductImage[]
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id         String      @id @default(cuid())
  userId     String
  status     OrderStatus @default(PENDING)
  total      Float
  stripeId   String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  payment    Payment?
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Payment {
  id                    String        @id @default(cuid())
  orderId               String        @unique
  stripePaymentIntentId String?
  amount                Float
  status                PaymentStatus @default(PENDING)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  order                 Order         @relation(fields: [orderId], references: [id])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
  FAILED
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}

enum Role {
  USER
  ADMIN
  MANAGER
}
